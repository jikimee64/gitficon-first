name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v3

      # github actions 서버 확인
      - name: Test
        run: |
          ls
          pwd

      - name: JDK 17버전 설치
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: db-core.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./storage/db-core/src/main/resources/db-core.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew core:core-api:clean core:core-api:build

      - name: 빌드된 파일 이름 변경하기
        run: mv ./core/core-api/build/libs/app.jar ./app.jar

        # $GITHUB_SHA는 는 커밋 ID
        # app.jar , appspect.yml, scripts 폴더를 압축
      - name: 압축하기
        run: tar -czvf $GITHUB_SHA.tar.gz app.jar appspec.yml scripts

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t ordersystem-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag ordersystem-server ${{ steps.login-ecr.outputs.registry }}/ordersystem-server:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/ordersystem-server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop ordersystem-server || true
            docker rm ordersystem-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/ordersystem-server:latest
            docker run -d --name ordersystem-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/ordersystem-server:latest